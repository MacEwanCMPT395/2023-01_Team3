# Form implementation generated from reading ui file 'CalculateScreen.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMessageBox, QApplication
from PyQt6.QtCore import Qt

import datetime


class Ui_Form(object):

    def check_dates(self, start_date, end_date):
        if end_date <= start_date:
            return True

    def show_popup(self):
        msg = QMessageBox()
        msg.setWindowTitle("Date Error")
        msg.setText("Selected End Date Must be after Start Date!") 
        x = msg.exec()


    def day_of_week(self, day, month, year ):
        date = datetime.datetime(year, month, day)
        return date.strftime("%A")
    
    def count_mon_wed(self, start_date, end_date):
        monday_count = 0           
        wednesday_count = 0
        current_date = start_date
        while current_date <= end_date:
            if current_date.weekday() == 0:
                monday_count += 1
            elif current_date.weekday() == 2:
                wednesday_count += 1
            current_date += datetime.timedelta(days=1)
        return (monday_count, wednesday_count)
    
    def count_tue_thu(self, start_date, end_date):
        tuesday_count = 0           
        thursday_count = 0
        current_date = start_date
        while current_date <= end_date:
            if current_date.weekday() == 1:
                tuesday_count += 1
            elif current_date.weekday() == 3:
                thursday_count += 1
            current_date += datetime.timedelta(days=1)
        return (tuesday_count, thursday_count)
    

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1159, 803)
        self.label = QtWidgets.QLabel(parent=Form)
        self.label.setGeometry(QtCore.QRect(0, 0, 1161, 811))
        self.label.setPixmap(QtGui.QPixmap("BG.jpg"))
        self.label.setText("")
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.summary = QtWidgets.QTextEdit(parent=Form)
        self.summary.setGeometry(QtCore.QRect(80, 480, 601, 241))
        self.summary.setObjectName("summary")
        self.term_combobox = QtWidgets.QComboBox(parent=Form)
        self.term_combobox.setGeometry(QtCore.QRect(180, 230, 131, 22))
        self.term_combobox.setObjectName("term_combobox")
        self.term_combobox.addItem("")
        self.term_combobox.addItem("")
        self.calculate_button = QtWidgets.QPushButton(parent=Form)
        self.calculate_button.setGeometry(QtCore.QRect(310, 400, 111, 41))
        self.calculate_button.setObjectName("calculate_button")
        self.label_2 = QtWidgets.QLabel(parent=Form)
        self.label_2.setGeometry(QtCore.QRect(290, 130, 191, 51))
        font = QtGui.QFont()
        font.setFamily("Perpetua")
        font.setPointSize(26)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(parent=Form)
        self.label_3.setGeometry(QtCore.QRect(90, 230, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(parent=Form)
        self.label_4.setGeometry(QtCore.QRect(30, 300, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.term_end = QtWidgets.QDateEdit(parent=Form)
        self.term_end.setGeometry(QtCore.QRect(500, 290, 131, 31))
        self.term_end.setObjectName("term_end")
        self.label_5 = QtWidgets.QLabel(parent=Form)
        self.label_5.setGeometry(QtCore.QRect(370, 300, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.term_start = QtWidgets.QDateEdit(parent=Form)
        self.term_start.setGeometry(QtCore.QRect(180, 290, 131, 31))
        self.term_start.setObjectName("term_start")


        #Calculate Button
        self.calculate_button.clicked.connect(self.display_calculations)


        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    # This function returns a day of the week string    
    def startday_term(self):

        year, month, day = (str(self.term_start.date().toPyDate())).split('-')
        semester_start_day = self.day_of_week(int(day),int(month), int(year))
        return year, month, day, semester_start_day

    def get_sept30_day(self, year):
        date = datetime.date(year,9,30)
        days_of_week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        return days_of_week[date.weekday()]
    
    def total_core_term_teaching_hours (self, days):
        return 1.5 * days

    # This function will fill the summary box with relevant text
    def display_calculations(self):
        #Get user inputs
        term = self.term_combobox.currentText()
        date_start = self.term_start.date().toPyDate()
        date_end = self.term_end.date().toPyDate()    
        year, month, day = (str(self.term_start.date().toPyDate())).split('-')

        # Check that end date is after start date, add message
        if(self.check_dates(date_start, date_end)):
            self.show_popup()
            return
        
        # Calculate days in term
        mondays_count, wednesdays_count = self.count_mon_wed(date_start, date_end)
        tuesday_count, thursday_count = self.count_tue_thu(date_start,date_end)


        days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday']
        sept_30 = self.get_sept30_day(int(year))
        if term == 'Fall':
            count = [mondays_count, tuesday_count, wednesdays_count, thursday_count]
            count[days.index(sept_30)] -= 1

        # Mondays/wednesdays count are -1 to account for reading week
        core_hours_per_term = self.total_core_term_teaching_hours((mondays_count - 1) + (wednesdays_count -1))

        self.summary.setText(f'Term selected: {term}.\nTerm Start Date: {date_start}.\n' +
                             f'Term End Date: {date_end}\n\n'+
                             f'The number of Mondays: {mondays_count-1}, and Wednesdays: {wednesdays_count-1}\n'+
                             f'The number of Tuesdays: {tuesday_count-1}, and Thursdsays: {thursday_count-1}'+
                             f'\n\nBased on the number of Mondays and Wednesdays in the {term} {year} Term there are {core_hours_per_term} '+
                             f'teaching hours dedicated to Core Programs Courses.')
        

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.term_combobox.setItemText(0, _translate("Form", "Fall"))
        self.term_combobox.setItemText(1, _translate("Form", "Winter"))
        self.calculate_button.setText(_translate("Form", "Calculate"))
        self.label_2.setText(_translate("Form", "Scheduler"))
        self.label_3.setText(_translate("Form", "Term:"))
        self.label_4.setText(_translate("Form", "Start Date:"))
        self.label_5.setText(_translate("Form", "End Date:"))
    



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec())
